{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAChCC,EAAc,EAEdC,EAAW,EACXC,EAAS,EACTC,EAAQ,EACRC,EAAO,EAEXP,EAAKQ,iBAAiB,UAEtB,SAAoBC,GAClBA,EAAEC,iBAEFJ,EAAQK,OAAOX,EAAKY,SAASC,MAAMC,OAEnCT,EAASM,OAAOX,EAAKY,SAASG,OAAOD,OAErCP,EAAOI,OAAOX,EAAKY,SAASI,KAAKF,OAEjCX,EAAcc,aAAY,WA4B5B,IAAuBC,EAAUC,EACzBC,GA5BJhB,GAAY,GACG,IACbE,GAASC,GAIXc,QAAQC,IAAIhB,GACZe,QAAQC,IAAIlB,IAoBOc,EAnBLd,EAmBee,EAnBLb,EAoBpBc,EAAgBG,KAAKC,SAAW,GAE/B,IAAIC,SAAQ,SAACC,EAASC,GACjBV,aAAY,WAChBG,EACFM,EAAQ,CAAEE,SAAAV,EAAUL,MAAAM,IAEpBQ,EAAO,CAAEC,SAAAV,EAAUL,MAAAM,G,GAEpBA,E,KA5BAU,MAAK,SAAAC,G,IAAGC,EAAQD,EAARF,SAAUI,EAAKF,EAALjB,MACjBoB,EAAAnC,GAASoC,OAAOC,QACd,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,IAGjDK,OAAM,SAAAP,G,IAAGQ,EAAQR,EAARF,SAAUW,EAAKT,EAALjB,MAClBoB,EAAAnC,GAASoC,OAAOM,QACd,sBAAqCJ,OAAfE,EAAS,QAAYF,OAANG,EAAM,M,IAI7CnC,GAAYC,IACdoC,cAActC,GACdC,EAAW,E,GAEZE,E","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nlet submitTimer = 0;\nlet timerId = 0;\nlet position = 0;\nlet amount = 0;\nlet delay = 0;\nlet step = 0;\n\nform.addEventListener('submit', submitForm);\n\nfunction submitForm(e) {\n  e.preventDefault();\n\n  delay = Number(form.elements.delay.value);\n\n  amount = Number(form.elements.amount.value);\n\n  step = Number(form.elements.step.value);\n\n  submitTimer = setInterval(() => {\n    position += 1;\n    if (position > 1) {\n      delay += step;\n    } else {\n      delay;\n    }\n    console.log(delay);\n    console.log(position);\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    if (position >= amount) {\n      clearInterval(submitTimer);\n      position = 0;\n    }\n  }, delay);\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    timerId = setInterval(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$submitTimer","$ce04d3a99e08e73b$var$position","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","addEventListener","e","preventDefault","Number","elements","delay","value","amount","step","setInterval","position3","delay3","shouldResolve","console","log","Math","random","Promise","resolve","reject","position","then","param","position1","delay1","$parcel$interopDefault","Notify","success","concat","catch","position2","delay2","failure","clearInterval"],"version":3,"file":"03-promises.1a27df49.js.map"}